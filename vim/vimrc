" vimrc
" -----
" Michael Hoy | michael.john.hoy@gmail.com | 2012

" This option goes first because it may have side-effects.
set nocompatible

" Pathogen
" --------
" Loads all plugins in ~/.vim/bundle
call pathogen#infect()

" Common-sense stuff
" ------------------

" Syntax highlightin
syntax enable

" Enable file type detection; autoload plugin and indent files.
filetype plugin indent on

" Line numbers.
set number

" Rule under the cursor.
set ruler

" Shows little command bits in the last line of the screen.
set showcmd

" Tell me what mode I'm in.
set showmode

" Allow backspacing over indents, line breaks, the start of insert.
set backspace=indent,eol,start

" Do not unload a buffer when hidden.
set hidden

" Enhanced mode for command-line completion.
set wildmenu

" Completion till the longest common string (like bash).
set wildmode=list:longest

" Case-insensitive searching.
set ignorecase

" Case-sensitive searching if expression contains a capital letter.
set smartcase

" Highlight matches as you type.
set incsearch

" Highlight matches.
set hlsearch

" No line wrapping.
set nowrap

" Minimum 3 lines kept above/below cursor.
set scrolloff=3

" Title of window set to value of the filename or 'titlestring'.
set title

" No beep.
set visualbell

" Do not make a backup before overwriting.
set nobackup

" Again?
set nowritebackup

" Use the Mac OS X clipboard.
set clipboard=unnamed

" Use <F2> to turn off indenting for pasting.
set pastetoggle=<F2>

" 2 spaces for tabs.
set tabstop=2
set shiftwidth=2
set expandtab

" no coffeescript trailing space error indication
let coffee_no_trailing_space_error = 1

" Use magic
set magic

" Show the status line all the time
set laststatus=2                  

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %=%-16(\ %l,%c-%v\ %)%P

" Use 256 colors.
set t_Co=256

set background=dark
colorscheme solarized

" Use comma for leader.
let mapleader=","

" Double leader switches to last buffer.
nnoremap <leader><leader> <c-^>

" Gundo plugin for easy undo/redo tree browsing
" Requires Vim 7.3
map <leader>gu :GundoToggle<cr>

" Map ,e and ,v to open files in the same directory as the current file
" From Gary Bernhardt's vimrc
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" <C-L> to clear search
if exists(":nohls")
  nnoremap <silent> <C-L> :nohls<CR><C-L>
endif

" Autocommands
augroup vimrcEx
  " Remove ALL autocommands for the current group
  autocmd!

  " Fold on syntax for ruby.
  autocmd FileType ruby set foldmethod=syntax

  " Jump to the last known position in a file just after opening it.
  " See :help last-position-jump
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  " Don't fold at the start.
  autocmd FileType ruby set nofoldenable

  " Gemfiles are ruby files
  autocmd BufRead,BufNewFile Gemfile set filetype=ruby

  " *.md -> markdown files
  autocmd BufRead,BufNewFile *.md set filetype=markdown
augroup END

" Multipurpose tab key
" (tabs after whitespace, or completion after characters)
" See https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Tab status line
" see :help setting-tabline
set tabline=%!MyTabLine()

function! MyTabLine()

  let s = ''
  for i in range(tabpagenr('$'))

    " Select highlighting
    if i + 1 == tabpagenr()
      let s .= '%#TabLineSel#'
    else
      let s .= '%#TabLine#'
    endif

    " set the tab page number (for mouse clicks)
    let s .= '%' . (i + 1) . 'T'

    " the label is made by MyTabLabel()
    let s .= ' %{MyTabLabel(' . (i + 1) . ')} '
  endfor

  " after the last tab fill with TabLineFill and reset tab page nr
  let s .= '%#TabLineFill#%T'

  " put git status in the upper right.
  if tabpagenr('$') > 1
    let s .= '%=%#Keyword#%999X%{fugitive#statusline()}'
  endif

  return s
endfunction

function! MyTabLabel(n)
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)
  return bufname(buflist[winnr - 1])
endfunction


function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

" DiffOrig -- diff original file w/ buffer in new vert
" from help :DiffOrig
" (http://vimdoc.sourceforge.net/htmldoc/diff.html#:DiffOrig)
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

" No thanks for flying
let &titleold=''
